
  0%|                                                                                                         | 0/80 [00:00<?, ?it/s]
Train Epoch: 0 	Graphs_seen: 0.0% 	Loss: 232.741119
Train Epoch: 0 	Graphs_seen: 27.23% 	Loss: 227.640701
Train Epoch: 0 	Graphs_seen: 54.47% 	Loss: 215.785034
Train Epoch: 0 	Graphs_seen: 81.7% 	Loss: 211.947266

  1%|█▏                                                                                             | 1/80 [01:07<1:28:28, 67.19s/it]
Test set: Average loss: 1.6535, Accuracy: 11043.0/2012400856.0 (0%)
Train Epoch: 1 	Graphs_seen: 0.0% 	Loss: 210.704071
Train Epoch: 1 	Graphs_seen: 27.23% 	Loss: 214.506638
Train Epoch: 1 	Graphs_seen: 54.47% 	Loss: 212.794144
Train Epoch: 1 	Graphs_seen: 81.7% 	Loss: 200.430786
  1%|█▏                                                                                            | 1/80 [02:05<2:45:12, 125.48s/it]
Traceback (most recent call last):
  File "/home/nbiescas/Desktop/CVC/CVC_internship/main.py", line 29, in <module>
    model_pipeline(model, train_loader, val_loader, test_loader)
  File "/home/nbiescas/Desktop/CVC/CVC_internship/training.py", line 99, in model_pipeline
    train_loss = train(epoch, criterion, model, optimizer, train_loader)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/nbiescas/Desktop/CVC/CVC_internship/training.py", line 74, in train
    output, means_list, log_std_list = model(graph, features)  #The output is a list containing the different predictions for the graphs
                                       ^^^^^^^^^^^^^^^^^^^^^^
  File "/home/nbiescas/miniconda3/envs/CVC/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/nbiescas/Desktop/CVC/CVC_internship/VGAE.py", line 66, in forward
    adj_rec = self.decoder(g, z)
              ^^^^^^^^^^^^^^^^^^
  File "/home/nbiescas/Desktop/CVC/CVC_internship/VGAE.py", line 58, in decoder
    output_matrix.append(torch.sigmoid(torch.matmul(features_graph, features_graph.t())))
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt